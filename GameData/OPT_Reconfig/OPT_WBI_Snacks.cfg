// Snacks! = = = = = =


@PART:HAS[#manufacturer[OPT*Division],#CrewCapacity[>0]]:NEEDS[SnacksUtils]
{
	MODULE:NEEDS[Snacks]
	{
		name = SoilRecycler
		ConverterName = Soil Recycler
		StartActionName = Start Soil Recycler
		StopActionName = Stop Soil Recycler
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = true
		SpecialistEfficiencyFactor = 0.2
		UseSpecializationBonus = true
		SpecialistEfficiencyFactor = 0.1
		ExperienceEffect = ScienceSkill
		EfficiencyBonus = 1
		RecyclerCapacity = 1
		@RecyclerCapacity *= #$../CrewCapacity$
	 
		INPUT_RESOURCE
		{
			ResourceName = Soil
			Ratio = 0.000034723
			FlowMode = ALL_VESSEL
  		}

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 12
		}

		OUTPUT_RESOURCE
		{
			ResourceName = Snacks
			Ratio = 0.000034723
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
	}
	
	// RESOURCE
	// {
		// name = Snacks
		// amount = 6
		// maxAmount = 6
		// @amount *= #$../CrewCapacity$
		// @maxAmount *= #$../CrewCapacity$
	// }
	// RESOURCE
	// {
		// name = Soil
		// amount = 0
		// maxAmount = 6
		// @maxAmount *= #$../CrewCapacity$
	// }
}

@PART[j_4m_lab|b_4m_lab|k_3m_lab]:NEEDS[SnacksUtils]
{
	@tags ^= :$: cck-lifesupport:
	MODULE
	{
		name = SnackProcessor
		ConverterName = Snack Processor
		StartActionName = Start Snack Processor
		StopActionName = Stop Snack Processor
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = true
		UseSpecializationBonus = true
		SpecialistEfficiencyFactor = 0.1
		ExperienceEffect = ScienceSkill
		EfficiencyBonus = 1.0
		 
		//Ore masses 0.01 metric tons per unit
		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.004
			FlowMode = STAGE_PRIORITY_FLOW
  		}

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 60
		}

		//Snacks masses 0.001 metric tons per unit
		//1 Ore = 5 Snacks, not all of the ore is usable...
		OUTPUT_RESOURCE
		{
			ResourceName = Snacks
			Ratio = 0.002
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
}


// Air! = = = = = =


@PART:HAS[#manufacturer[OPT*Division],#CrewCapacity[>0]]:NEEDS[SnacksFreshAir]
{
	MODULE
	{
		name = SnacksConverter
		ConverterName = Air Scrubber
		StartActionName = Start Air Scrubber
		StopActionName = Stop Air Scrubber
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		
		INPUT_RESOURCE
		{
			ResourceName = StaleAir
			Ratio = 0.000185
			@Ratio *= #$/CrewCapacity$
			FlowMode = ALL_VESSEL
		}

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 0.1
			@Ratio *= #$/CrewCapacity$
			FlowMode = ALL_VESSEL
		}

		OUTPUT_RESOURCE
		{
			ResourceName = FreshAir
			Ratio = 0.000074
			@Ratio *= #$/CrewCapacity$
			FlowMode = ALL_VESSEL
		}
	}
	// RESOURCE
	// {
		// name = FreshAir
		// amount = 2
		// maxAmount = 2
		// @amount *= #$../CrewCapacity$
		// @maxAmount *= #$../CrewCapacity$
	// }
	// RESOURCE
	// {
		// name = StaleAir
		// amount = 0
		// maxAmount = 2
		// @maxAmount *= #$../CrewCapacity$
	// }
}


// Stress! = = = = = =


@PART[j_4m_crew|k_3m_crew|l_6m_crew|h_3m_crew_fm]:NEEDS[SnacksStress]
{
	MODULE
	{
		name = SnacksConverter
		ConverterName = Entertainment Center
		StartActionName = Start Entertainment
		StopActionName = Stop Entertainment
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		
		//At least one crew needs to be in the part to run the converter.
		minimumCrew = 1

		//Connection back home required to receive entertainment.
		requiresHomeConnection = true

		//This condition is set whenever the kerbal enters the part and the converter is active, and
		//when the converter is started. Since it's registered as a SKILL_LOSS_CONDITION, the kerbals will lose their
		//skills while the converter is running.
		conditionSummary = Relaxing

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 0.1
			@Ratio *= #$/CrewCapacity$
			FlowMode = ALL_VESSEL
		}

		//Works like an INPUT_RESOURCE except:
		// It applies to individual kerbals.
		// You can specify an AmountPerDay or AmountPerSecond.
		ROSTER_INPUT_RESOURCE
		{
			ResourceName = Stress

			//AmountPerDay will be translated into: AmountPerDay / seconds per homeworld day
			//This will override AmountPerSecond if it is defined in the node.
			AmountPerDay = 2
		}
	}
}


@PART[h_3m_crew_mm]:NEEDS[SnacksStress]
{
	MODULE
	{
		name = SnacksConverter
		ConverterName = Stargazing
		StartActionName = Start Stargazing
		StopActionName = Stop Stargazing
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		
		//At least one crew needs to be in the part to run the converter.
		minimumCrew = 1

		//Connection back home required to receive entertainment.
		requiresHomeConnection = false

		//This condition is set whenever the kerbal enters the part and the converter is active, and
		//when the converter is started. Since it's registered as a SKILL_LOSS_CONDITION, the kerbals will lose their
		//skills while the converter is running.
		conditionSummary = Stargazing

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 0.05
			@Ratio *= #$/CrewCapacity$
			FlowMode = ALL_VESSEL
		}

		//Works like an INPUT_RESOURCE except:
		// It applies to individual kerbals.
		// You can specify an AmountPerDay or AmountPerSecond.
		ROSTER_INPUT_RESOURCE
		{
			ResourceName = Stress

			//AmountPerDay will be translated into: AmountPerDay / seconds per homeworld day
			//This will override AmountPerSecond if it is defined in the node.
			AmountPerDay = 1.5
		}
	}
}

@PART:HAS[#manufacturer[OPT*Division],#CrewCapacity[>0]]:NEEDS[SnacksStress]
{
	FeatureBiasB = #$@OPTMOD/FeatureBiasB$
}

@PART:HAS[#manufacturer[OPT*Division],#CrewCapacity[>0],#FeatureBiasB[0]]:NEEDS[SnacksStress]
{
	MODULE
    {
        // This part module is designed to negate one or more preconditions so long as the kerbal resides in the part.
        // An example would be a centrifuge.
        name = SnacksDisqualifier

        //Contains the disqualified preconditions such as CheckGravityLevel.checkLesserOrEqual for low gravity checks. 
        // Separate disqualified preconditions by semicolon.
        // Most of the preconditions can be disqualified simply by stating their name. 
        // If a precondition requires something different, be sure to check its documentation.
        disqualifiedPreconditions = CheckGravityLevel
    }
}