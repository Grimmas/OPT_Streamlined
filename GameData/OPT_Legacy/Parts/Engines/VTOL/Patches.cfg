// CTT = = =

@PART[opt_vtol_heli1]
{
	@TechRequired = subsonicFlight
}
@PART[opt_vtol_bubble1]
{
	@TechRequired = expAircraftEngines
}

// Restock = = =

@PART[opt_vtol*]:NEEDS[Restock]
{
	MODULE
	{
		name = ModuleRestockDepthMask
		maskTransform = DepthMask
	}
}

// B9 = = =

@PART[opt_vtol_wrapj*]:NEEDS[B9AnimationModules]
{
	MODULE
    {
        name = ModuleB9AnimateIntake
        animationName = JIntShutter
        responseSpeed = 0.1
        intakeClosedState = 1
        machCurve
        {
			key = 0.87 0
			key = 1 1
        }
    }
}
@PART[opt_vtol_wrapk*]:NEEDS[B9AnimationModules]
{
	MODULE
    {
        name = ModuleB9AnimateIntake
        animationName = KIntShutter
        responseSpeed = 0.1
        intakeClosedState = 1
        machCurve
        {
			key = 0.87 0
			key = 1 1
        }
    }
}
@PART[opt_vtol_wrapl*]:NEEDS[B9AnimationModules]
{
	MODULE
    {
        name = ModuleB9AnimateIntake
        animationName = LIntShutter
        responseSpeed = 0.1
        intakeClosedState = 1
        machCurve
        {
			key = 0.87 0
			key = 1 1
        }
    }
}
@PART[opt_vtol_hc*]:NEEDS[B9AnimationModules]
{
	MODULE
    {
        name = ModuleB9AnimateIntake
        animationName = HCIntShutter
        responseSpeed = 0.1
        intakeClosedState = 1
        machCurve
        {
			key = 0.87 0
			key = 1 1
        }
    }
}

// TweakScale = = =

@PART[opt_vtol_hc*]:NEEDS[TweakScale]
{
	#@TWEAKSCALEBEHAVIOR[Engine]/MODULE[TweakScale] { }
    %MODULE[TweakScale]
    {
        type = stack
        defaultScale = 3.75
    }
}
@PART[opt_vtol_heli*|opt_vtol_rudder*]:NEEDS[TweakScale]
{
	#@TWEAKSCALEBEHAVIOR[Engine]/MODULE[TweakScale] { }
    %MODULE[TweakScale]
    {
        type = stack
        defaultScale = 3.1
		scaleFactors = 1.25, 1.875, 2.5, 3.1, 3.75, 5, 7.5
		scaleNames = 1.25m, 1.875m, 2.5m, 3.1m, 3.75m, 5m, 7.5m
    }
}
@PART[opt_vtol_bubble*]:NEEDS[TweakScale]
{
	#@TWEAKSCALEBEHAVIOR[Engine]/MODULE[TweakScale] { }
    %MODULE[TweakScale]
    {
        type = stack
        defaultScale = 2.5
    }
}
@PART[opt_vtol_lp*]:NEEDS[TweakScale]
{
	#@TWEAKSCALEBEHAVIOR[Engine]/MODULE[TweakScale] { }
    %MODULE[TweakScale]
    {
        type = free_square
    }
}

// Variants = = =

VARIANTTHEME
{
	name = OPTVTOL0
	displayName = Tailless
	description = OPT VTOL engines have no tail.
	primaryColor = #dbdcdb
	secondaryColor = #dbdcdb
}
VARIANTTHEME
{
	name = OPTVTOL1
	displayName = Tail
	description = OPT VTOL engines with tail.
	primaryColor = #dbdcdb
	secondaryColor = #292b29
}
VARIANTTHEME
{
	name = OPTVTOL2
	displayName = Wing
	description = OPT VTOL engines with wing 1m adapter.
	primaryColor = #dbdcdb
	secondaryColor = #292b29
}
VARIANTTHEME
{
	name = OPTVTOL3
	displayName = Wing + Tail
	description = OPT VTOL engines with wing 1m adapter and tail.
	primaryColor = #dbdcdb
	secondaryColor = #292b29
}

@PART[opt_vtol_heli*]
{
	MODULE
	{
		name = ModulePartVariants
		baseVariant = NoTail
		VARIANT
		{
			name = NoTail
			displayName = No tail
			themeName = OPTVTOL0
			primaryColor = #dbdcdb
			secondaryColor = #dbdcdb
			GAMEOBJECTS
			{
				Heli_TailFrameA = True
				Heli_TailFrameB = False
				Heli_BladeBlurA:NEEDS[!KerbalActuators] = False
				Heli_BladeBlurB:NEEDS[!KerbalActuators] = False
			}
		}
		VARIANT
		{
			name = Tail
			displayName = Tail
			themeName = OPTVTOL1
			primaryColor = #dbdcdb
			secondaryColor = #292b29
			GAMEOBJECTS
			{
				Heli_TailFrameA = False
				Heli_TailFrameB = True
				Heli_BladeBlurA:NEEDS[!KerbalActuators] = False
				Heli_BladeBlurB:NEEDS[!KerbalActuators] = False
			}
		}
	}
}
@PART[opt_vtol_rudder*]
{
	MODULE
	{
		name = ModulePartVariants
		baseVariant = NoTail
		VARIANT
		{
			name = NoTail
			displayName = No tail
			themeName = OPTVTOL0
			primaryColor = #dbdcdb
			secondaryColor = #dbdcdb
			GAMEOBJECTS
			{
				Rudder_TailFrameA = True
				Rudder_TailFrameB = False
				Rudder_WingAdapter = False
				Rudder_BladeBlur:NEEDS[!KerbalActuators] = False
			}
		}
		VARIANT
		{
			name = Tail
			displayName = Tail
			themeName = OPTVTOL1
			primaryColor = #dbdcdb
			secondaryColor = #292b29
			GAMEOBJECTS
			{
				Rudder_TailFrameA = False
				Rudder_TailFrameB = True
				Rudder_WingAdapter = False
				Rudder_BladeBlur:NEEDS[!KerbalActuators] = False
			}
		}
		VARIANT
		{
			name = Wing
			displayName = Wing
			themeName = OPTVTOL2
			primaryColor = #dbdcdb
			secondaryColor = #292b29
			GAMEOBJECTS
			{
				Rudder_TailFrameA = True
				Rudder_TailFrameB = False
				Rudder_WingAdapter = True
				Rudder_BladeBlur:NEEDS[!KerbalActuators] = False
			}
		}
		VARIANT
		{
			name = WingTail
			displayName = Wing + Tail
			themeName = OPTVTOL3
			primaryColor = #dbdcdb
			secondaryColor = #292b29
			GAMEOBJECTS
			{
				Rudder_TailFrameA = False
				Rudder_TailFrameB = True
				Rudder_WingAdapter = True
				Rudder_BladeBlur:NEEDS[!KerbalActuators] = False
			}
		}
	}
}

// Kerbal Actuators = = =

@PART[opt_vtol_rudder*]:NEEDS[KerbalActuators]
{
	MODULE
	{
		name = WBIPropSpinner

		guiVisible = True
		actionsVisible = True
		canReverseThrust = False
		forwardThrustActionName = Forward Thrust
		reverseThrustActionName = Reverse Thrust
		thrustTransform = thrustTransform
		reverseThrustTransform = intakeTransform

		//Name of the non-blurred rotor
		//The whole thing spins
		//Your hierarchy should have:
		//Rotor
		//---Hub: gets spun even when blades are blurred.
		//---Standard Blades (Optional): spun along with the hub
		//---Mirrored Blades (Optional): spun along with the hub
		rotorTransformName = Spin
		//Rotations per minute for the non-blurred rotor
		rotorRPM = 30
		//How fast to spin the rotor when blurred; multiply rotorRPM by blurredRotorFactor
		//When rotors are blurred, the hub is not; it's spun at high speed.
		blurredRotorFactor = 4.0		
		//How fast to spool up to RPM
		rotorSpoolTime = 1.0		
		//Rotation axis for both the non-blurred rotor and the blurred rotor
		rotorRotationAxis = 0,0,1

		//(Optional) Name of the blurred rotor
		//Blurred rotors should NOT be part of the Rotor hierarchy.
		//For the tilt-rotor, they are a child of EnginePivot.
		standardBladesName = Rudder_BladeStatic
		blurredRotorName = Rudder_BladeBlur		
		
		//How fast to spin the blurred rotor
		blurredRotorRPM = 0.5
		
		//At what percentage of thrust to switch to the blurred rotor/mesh rotor.
		minThrustRotorBlur = 60
	}
}
@PART[opt_vtol_heli*]:NEEDS[KerbalActuators]
{
	MODULE
	{
		name = WBIPropSpinner
		guiVisible = True
		actionsVisible = True
		canReverseThrust = False // Already provided in stock animation
		forwardThrustActionName = Forward Thrust
		reverseThrustActionName = Reverse Thrust
		thrustTransform = thrustTransform
		reverseThrustTransform = intakeTransform
		rotorTransformName = SpinA
		rotorRPM = 30
		blurredRotorFactor = 4.0
		rotorSpoolTime = 1.0
		rotorRotationAxis = 0,0,1
		standardBladesName = Heli_BladeStaticA
		blurredRotorName = Heli_BladeBlurA
		blurredRotorRPM = 0.2
		minThrustRotorBlur = 60
	}
	MODULE
	{
		name = WBIPropSpinner
		guiVisible = True
		actionsVisible = True
		canReverseThrust = False // Don't need a second such toggle
		forwardThrustActionName = Forward Thrust
		reverseThrustActionName = Reverse Thrust
		thrustTransform = thrustTransform
		reverseThrustTransform = intakeTransform
		rotorTransformName = SpinB
		rotorRPM = 30
		blurredRotorFactor = 4.0
		rotorSpoolTime = 1.0
		rotorRotationAxis = 0,0,-1
		standardBladesName = Heli_BladeStaticB
		blurredRotorName = Heli_BladeBlurB
		blurredRotorRPM = 0.2
		minThrustRotorBlur = 60
	}
}

@PART[opt_vtol*]:NEEDS[KerbalActuators]
{
	MODULE
	{
		name = WBIHoverController
		guiVisible = false
		verticalSpeedIncrements = 1.0
	}
}

// CRP = = =

@PART[opt_vtol_rudder*]:NEEDS[CommunityResourcePack,!ClassicStock]
{
	@MODULE[ModuleEnginesFX]:HAS[#engineID[FanElectric]]
	{
		@PROPELLANT[IntakeAir]
		{
			@name = IntakeAtm
			DrawGauge = True
		}
	}
	@MODULE[ModuleRCSFX]
	{
		@resourceName = IntakeAtm
	}
}
@PART[opt_vtol_heli*|opt_vtol_lpj1]:NEEDS[CommunityResourcePack,!ClassicStock]
{
	@MODULE[ModuleEnginesFX]:HAS[#engineID[FanElectric]]
	{
		@PROPELLANT[IntakeAir]
		{
			@name = IntakeAtm
			DrawGauge = True
		}
	}
}

// Classic Stock = = =

@PART[opt_vtol_rudder*]:NEEDS[ClassicStock]
{
	+MODULE[ModuleResourceIntake]:HAS[#resourceName[IntakeAir]]
	{
		@resourceName = Atmosphere
		%checkForOxygen = false
	}
	+RESOURCE[IntakeAir]
	{
		@name = Atmosphere
	}
	@MODULE[ModuleEnginesFX]:HAS[#engineID[FanElectric]]
	{
		@PROPELLANT[IntakeAir]
		{
			@name = Atmosphere
			DrawGauge = True
		}
		@PROPELLANT[ElectricCharge]
		{
			@ratio = 1
		}
	}
	RESOURCE
	{
		name = CompressedAtmosphere
		amount = 0
		maxAmount = 50
	}
	@MODULE[ModuleRCSFX]
	{
		@resourceName = CompressedAtmosphere
	}
	MODULE
	{
		name = ModuleAlternator
		outputName = Compressor (Open)
		outputUnits = CAtm/s
		RESOURCE
		{
			name = CompressedAtmosphere
			rate = 10.0
		}
	}
}
@PART[opt_vtol_heli*]:NEEDS[ClassicStock]
{
	+MODULE[ModuleResourceIntake]:HAS[#resourceName[IntakeAir]]
	{
		@resourceName = Atmosphere
		%checkForOxygen = false
	}
	+RESOURCE[IntakeAir]
	{
		@name = Atmosphere
	}
	@MODULE[ModuleEnginesFX]:HAS[#engineID[FanElectric]]
	{
		@PROPELLANT[IntakeAir]
		{
			@name = Atmosphere
			DrawGauge = True
		}
		@PROPELLANT[ElectricCharge]
		{
			@ratio = 1
		}
	}
}